on:
  push:
    tags:
      - "v*.*.*"

name: CD

jobs:
  # Pre-release test jobs ensure the tagged commit is stable.
  build_and_test_linux:
    name: Build and Test (Linux)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - uses: taiki-e/install-action@nextest
      - name: "Build and test"
        run: cargo nextest run --workspace --all-features

  build_and_test_macos:
    name: Build and Test (MacOS)
    runs-on: macos-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - uses: taiki-e/install-action@nextest
      - name: "Build and test"
        run: cargo nextest run --workspace --all-features

  # A single, unified job to build release binaries for multiple targets.
  build_and_release:
    name: Build and Release
    needs: [build_and_test_linux, build_and_test_macos]
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write # Required to create a GitHub release and upload assets
    strategy:
      matrix:
        include:
          # Linux builds using cross
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            asset_name: Linux_x86_64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            asset_name: Linux_arm64
          # macOS native builds
          - target: x86_64-apple-darwin
            os: macos-latest
            asset_name: Darwin_x86_64
          - target: aarch64-apple-darwin
            os: macos-latest # Natively builds on Apple Silicon runners
            asset_name: Darwin_arm64
          # Windows native build
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            asset_name: Windows_x86_64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      # For Linux, use `cross` to handle cross-compilation complexities.
      - name: Build with cross (Linux)
        if: runner.os == 'Linux'
        run: |
          cargo install cross --git https://github.com/cross-rs/cross
          cross build --target ${{ matrix.target }} --release

      # For other OSes (macOS, Windows), build natively.
      - name: Build with cargo (macOS/Windows)
        if: runner.os != 'Linux'
        run: cargo build --target ${{ matrix.target }} --release

      - name: Prepare Release Asset
        run: |
          # Get the current tag without the 'v' prefix for the version number
          VERSION=${{ github.ref_name }}
          # Define the binary path and the final asset name
          BIN_PATH="./target/${{ matrix.target }}/release/ohcrab"
          ASSET_NAME="ohcrab-${VERSION}-${{ matrix.asset_name }}"
          # Add .exe for Windows builds
          if [ "${{ runner.os }}" = "Windows" ]; then
            mv "${BIN_PATH}.exe" "${BIN_PATH}"
            ASSET_NAME="${ASSET_NAME}.exe"
          fi
          # Rename the binary to the final asset name
          mv "${BIN_PATH}" "${ASSET_NAME}"
        shell: bash

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          files: ohcrab*

  # This job publishes the crate to crates.io after all builds are successful.
  crates_io_publish:
    name: Publish to crates.io
    needs: [build_and_release]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2

      - name: Login to crates.io
        run: cargo login ${{ secrets.CRATES_IO_API_TOKEN }}

      - name: Publish to crates.io
        run: cargo publish
