on:
  push:
  pull_request:

name: CI

env:
  MSRV_FEATURES: "--all-features"

jobs:
  crate_metadata:
    name: Extract crate metadata
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust (stable) for cargo metadata
        uses: dtolnay/rust-toolchain@stable
      - name: Extract crate information
        id: crate_metadata
        run: |
          cargo metadata --no-deps --format-version 1 \
          | jq -r '"msrv=" + .packages[0].rust_version' \
          | tee -a "$GITHUB_OUTPUT"
    outputs:
      msrv: ${{ steps.crate_metadata.outputs.msrv }}

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust (stable) + components
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
      - name: Run cargo fmt
        run: cargo fmt --all -- --check
      - name: Run cargo clippy
        run: cargo clippy -- -D warnings

  build_and_test_linux:
    name: Build and Test (Linux)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Install nextest
        uses: taiki-e/install-action@v2
        with:
          tool: nextest
      - name: Build and test
        run: cargo nextest run --workspace --all-features

  build_and_test_macos:
    name: Build and Test (macOS)
    runs-on: macos-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Install nextest
        uses: taiki-e/install-action@v2
        with:
          tool: nextest
      - name: Build and test
        run: cargo nextest run --workspace --all-features

  # Optional: MSRV check (if you set `rust-version` in Cargo.toml)
  msrv:
    name: Check MSRV
    needs: crate_metadata
    if: ${{ needs.crate_metadata.outputs.msrv != '' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # Install rustup via stable so we can install a dynamic toolchain
      - uses: dtolnay/rust-toolchain@stable
      - name: Install MSRV toolchain
        run: |
          MSRV="${{ needs.crate_metadata.outputs.msrv }}"
          rustup toolchain install "$MSRV" --profile minimal
          rustup component add --toolchain "$MSRV" clippy rustfmt || true
          rustup default "$MSRV"
      - uses: Swatinem/rust-cache@v2
      - name: Build (MSRV)
        run: cargo build --workspace --all-features
      - name: Clippy (MSRV)
        run: cargo clippy --workspace --all-features -- -D warnings
